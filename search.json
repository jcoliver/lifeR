[{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to lifeR","text":"lifeR R package identifying locations visit order increase bird species list count. package relies eBird API query recent observations compare user’s species list. lists can life lists, year lists, etc. primary output report sites visit region species user’s list reported recently.","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to lifeR","text":"can install lifeR CRAN via: Alternatively, can download development version GitHub help remotes package: install GitHub want introductory vignette included installation, pass build_vignettes = TRUE call install_github():","code":"install.packages(\"lifeR\") install.packages(\"remotes\") remotes::install_github(repo = \"jcoliver/lifeR\") remotes::install_github(repo = \"jcoliver/lifeR\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"requirements","dir":"Articles","previous_headings":"Using lifeR","what":"Requirements","title":"Introduction to lifeR","text":"need minimum three pieces information use lifeR: eBird API key list species seen (life list, year list, etc.) pair latitude longitude coordinates center search potential locations.","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"ebird-api-key","dir":"Articles","previous_headings":"Using lifeR > Requirements","what":"1. eBird API key","title":"Introduction to lifeR","text":"lifeR relies public eBird API, need unique API key use package. Visit https://ebird.org/api/keygen get eBird API key (note prompted log eBird account). key random string letters numbers. suggest copy key save plain text file computer; can use program like Notepad TextEdit create plain text files. Save file somewhere remember (like “Documents”) name something recognizable (e.g. “ebird-api-key.txt”). use file later access eBird API.","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"your-species-list","dir":"Articles","previous_headings":"Using lifeR > Requirements","what":"2. Your species list","title":"Introduction to lifeR","text":"list species already seen, can vary based list like add species . want find sites birds never seen observed recently, use life list. working Big Year, use year list. Trying break 300 species Arizona year list? yes, use Arizona species list current year. can downloaded eBird account going https://ebird.org/lifelist/, using dropdown menus near top page select region time range list, downloading list “Download (csv)” link near upper-right corner page. Save file somewhere remember .","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"latitude-and-longitude","dir":"Articles","previous_headings":"Using lifeR > Requirements","what":"3. Latitude and longitude","title":"Introduction to lifeR","text":"Finally, lifeR designed identify sites region visit. Therefore, need provide information region . package uses latitude longitude coordinates serve “center” region interest finds sites within certain radius center. maximum radius 50 kilometers - want search larger area, just need define two centers (information provided ). know latitude longitude “center” recommend Google Maps, allows right- control-click location map, latitude longitude coordinates displayed. Note lifeR requires decimal degree formatted data (e.g. -110.92, 110° 55’ 12”).","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"create-the-report","dir":"Articles","previous_headings":"Using lifeR","what":"Create the report","title":"Introduction to lifeR","text":"Now three pieces information, can build report sites visit.","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"a-minimalist-example","dir":"Articles","previous_headings":"Using lifeR > Create the report","what":"A minimalist example","title":"Introduction to lifeR","text":"example creates report single center, near McCall, Idaho, USA. uses one function lifeR: SitesReport function handles querying eBird, comparing lists, building report resulting report called Goals-Report.html can open favorite web browser. NB: list file using downloaded prior 2023, format different - common scientific names combined single column (called Species) needed split. list one older downloads, need replace line: : line use SplitNames(), helper function deal format species names returned eBird older downloads. Note necessary download prior 2023. using list 2015 downloaded yesterday, need use SplitNames() function (.e. just use my_species <- user_list$Common).","code":"library(lifeR) # To use the sample list included in this package list_file <- system.file(\"extdata\", \"example-list.csv\", package = \"lifeR\")  # If you have your list file downloaded, replace the line above with one that  # indicates the location of your list file, e.g. # list_file <- \"~/Desktop/ebird_world_year_2021_list.csv\"  # Read the list of species into memory user_list <- read.csv(file = list_file)  # Extract the common names of species from your list my_species <- user_list$Common  # Read in eBird API key from a text file; replace the argument to file with  # the actual location of your eBird key file key <- scan(file = \"ebird-api-key.txt\", what = \"character\")  # A single center requires vector of coordinates # Change these, unless you really want to go birding near McCall, Idaho locs <- c(45, -116) SitesReport(centers = locs,              ebird_key = key,              species_seen = my_species) my_species <- user_list$Common my_species <- SplitNames(x = user_list$Species)$Common"},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"multiple-sites-with-names","dir":"Articles","previous_headings":"Using lifeR > Create the report","what":"Multiple sites, with names","title":"Introduction to lifeR","text":"example uses one center base searches provide name center (given default name “Center 1” report). example , provide two starting points. Note list nearby sites starting point included results. , report include top five sites near first set latitude longitude coordinates top five sites near second set latitude longitude coordinates. example assumes loaded species list location eBird API key file first example, .","code":"# For more than one location, centers can be a matrix or a data frame, here  # we use a matrix of two sites loc_mat <- matrix(data = c(39.5, -118.8, 39, -119.1), nrow = 2, byrow = TRUE)  # Instead of default \"Center 1\" and \"Center 2\", we can use custom names loc_names <- c(\"Fallon\", \"Yerington\")  # Sites report now uses loc_names in the output SitesReport(centers = loc_mat,              ebird_key = key,              species_seen = my_species,              center_names = loc_names)"},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"multiple-sites-from-a-data-frame-narrower-range-and-informative-report-file-name","dir":"Articles","previous_headings":"Using lifeR > Create the report","what":"Multiple sites from a data frame, narrower range, and informative report file name","title":"Introduction to lifeR","text":"SitesReport can also accommodate data frame latitude longitude coordinates. can also give report different name (report_filename) specify saved (report_dir).","code":"loc_df <- data.frame(latitude = c(39.5, 39, 40),                      longitude = c(-118.8, -119.1, -118.6)) loc_names <- c(\"Fallon\", \"Yerington\", \"Humbolt Wildlife\")  # We can set the area to search by passing values to the dist argument SitesReport(centers = loc_df,              ebird_key = key,              dist = 25,             species_seen = my_species,              center_names = loc_names,             report_filename = \"Nevada-sites\",             report_dir = \"~/Desktop\") # Saves report to desktop"},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"helpful-tips","dir":"Articles","previous_headings":"Using lifeR > Create the report","what":"Helpful tips","title":"Introduction to lifeR","text":"go without saying, unlikely see species identified recently observed given site. might recent observations result Northern Goshawk showing output report, lifeR makes guarantees actually see godforsaken bird. Along similar lines, report makes claims veracity observations top sites identified. Difficult identify species species detected call song often find way onto reports. leave individual users decide worth trip site someone claims identified Chihuahuan Raven preening pale neck feathers amongst unkindness Common Ravens. shorter, restrictive list (e.g. use year list instead life list) larger radius search (maximum 50km) Additional centers start search (.e. one 100km home base)","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"how-does-it-work","dir":"Articles","previous_headings":"Using lifeR","what":"How does it work?","title":"Introduction to lifeR","text":"main goal, identifying sites visit find species yet see, uses eBird’s API query recent local observations. Specifically, SitesReport function: Queries eBird find species seen within certain radius latitude longitude coordinates provide, Compares list recently observed species list provide (e.g.  year list), identify unseen species, unseen species, queries eBird , time find nearby sites species recently seen, Identifies sites unseen species, Creates maps, tables, final report. Perhaps asking “difference steps 1 3?” two separate queries required first returns recent observation species given region. , even though Black-bellied Whistling Duck seen 14 nearby sites, recent observation (therefore locality information) returned eBird step 1. step 3 retrieve sites species recently seen.","code":""},{"path":"https://jcoliver.github.io/lifeR/articles/lifer-intro.html","id":"what-doesnt-the-package-do","dir":"Articles","previous_headings":"Using lifeR","what":"What doesn’t the package do?","title":"Introduction to lifeR","text":"Connect eBird account. eBird API designed query publicly available data observations. provide way query individual users’ accounts. reason responsible downloading species list feeding SitesReport(). Include additional measures confidence. nice lifeR include estimate likelihood seeing species based many people seen average number individuals observed. nice, data available eBird API. information returned eBird details recent observation particular species particular site; , means determining species seen 100% observers particular day, 5% observers.","code":""},{"path":"https://jcoliver.github.io/lifeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeffrey Oliver. Author, maintainer.","code":""},{"path":"https://jcoliver.github.io/lifeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oliver J (2023). lifeR: Identify Sites Bird List. https://jcoliver.github.io/lifeR/, https://github.com/jcoliver/lifeR/.","code":"@Manual{,   title = {lifeR: Identify Sites for Your Bird List},   author = {Jeffrey Oliver},   year = {2023},   note = {https://jcoliver.github.io/lifeR/, https://github.com/jcoliver/lifeR/}, }"},{"path":"https://jcoliver.github.io/lifeR/index.html","id":"lifer-","dir":"","previous_headings":"","what":"lifeR","title":"lifeR","text":"R package identifying locations visit order increase species list count. package relies eBird API query recent observations compare user’s species list. lists can life lists, year lists, county lists, etc.","code":""},{"path":"https://jcoliver.github.io/lifeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"lifeR","text":"can install lifeR CRAN via: Alternatively, can download development version GitHub help remotes package: install GitHub want introductory vignette included installation, pass build_vignettes = TRUE call install_github(): load package library","code":"install.packages(\"lifeR\") install.packages(\"remotes\") remotes::install_github(repo = \"jcoliver/lifeR\") install.packages(\"remotes\") remotes::install_github(repo = \"jcoliver/lifeR\", build_vignettes = TRUE) library(\"lifeR\")"},{"path":"https://jcoliver.github.io/lifeR/index.html","id":"a-minimalist-example","dir":"","previous_headings":"","what":"A minimalist example","title":"lifeR","text":"","code":"# Location of the file with your year list list_file <- \"~/Desktop/ebird_world_year_2021_list.csv\"  # Read the list of species into memory user_list <- read.csv(file = list_file)  # Extract the common names of species from your list my_species <- user_list$Common  # Read in eBird API key from a text file; replace the argument to file with  # the actual location of your eBird key file key <- scan(file = \"ebird-api-key.txt\", what = \"character\")  # A single center requires vector of coordinates # Change these, unless you really want to go birding near McCall, Idaho locs <- c(45, -116) SitesReport(centers = locs,              ebird_key = key,              species_seen = my_species)"},{"path":"https://jcoliver.github.io/lifeR/index.html","id":"miscellaneous-debris","dir":"","previous_headings":"","what":"Miscellaneous debris","title":"lifeR","text":"early development project, also see https://github.com/jcoliver/ebird-targets. complete R wrapper eBird API, check rebird package.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/CoordInBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","title":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","text":"Determine coordinate bounds, , return closed valid value","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/CoordInBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","text":"","code":"CoordInBounds(x, latitude)"},{"path":"https://jcoliver.github.io/lifeR/reference/CoordInBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","text":"x numeric decimal degree, longitude latitude direction logical indicating whether x latitude  (.e. longitude)","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/CoordInBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","text":"copy original numeric vector decimal degrees, x,  invalid values (.e. latitude > 90) corrected closest  valid value","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/CoordInBounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if coordinate is in bounds, and if not, return closed valid value — CoordInBounds","text":"helper function designed keep map bounds using invalid  coordinates (latitudes outside -90 90; longitudes outside -180  180). round values nearest valid value. feature-rich approach  treat longitudes little carefully, values outside  range updated antimeridian mind. example, longitude  182 become -178. However, drawing polygons include  antimeridian nightmare, since done  helper function, simply round 180.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop species with given patterns in name — DropPatterns","title":"Drop species with given patterns in name — DropPatterns","text":"Drop species given patterns name","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop species with given patterns in name — DropPatterns","text":"","code":"DropPatterns(   data,   patterns = c(\"sp.\", \"/\", \"Domestic type\", \"hybrid\"),   colname = \"comName\" )"},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop species with given patterns in name — DropPatterns","text":"data data.frame observations, likely object call RecentNearby. patterns Character vector patterns colname column omit. colname Character vector indicating column names search patterns.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop species with given patterns in name — DropPatterns","text":"Copy data rows values colname match values patterns.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop species with given patterns in name — DropPatterns","text":"utility function provides means omitting observations \"taxa\" domestics, hybrids, \"sp.\" observations. patterns = NULL, rows dropped.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/DropPatterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop species with given patterns in name — DropPatterns","text":"","code":"df <- data.frame(comName = c(\"Mallard\", \"Mallard x Mexican Duck hybrid\", \"Verdin\"),                  date = c(\"2021-01-09\", \"2021-01-09\", \"2021-01-09\")) df <- DropPatterns(data = df)"},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":null,"dir":"Reference","previous_headings":"","what":"Map of sites with highest number of missing species — MapSites","title":"Map of sites with highest number of missing species — MapSites","text":"Map sites highest number missing species","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map of sites with highest number of missing species — MapSites","text":"","code":"MapSites(sites, center_lng = NULL, center_lat = NULL)"},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map of sites with highest number of missing species — MapSites","text":"sites data.frame least following columns: locName Name location. locId eBird identifier location. num_new Number new species site lat Numeric latitude decimal degrees lng Numeric longitude decimal degrees center_lng, center_lat Numeric decimal degrees longitude latitude  geographic center used searching sites.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map of sites with highest number of missing species — MapSites","text":"ggmap object.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map of sites with highest number of missing species — MapSites","text":"function primarily used SitesReport via  template RMarkdown file used build reports. intended  standalone use.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/MapSites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map of sites with highest number of missing species — MapSites","text":"","code":"if (FALSE) {   # Create data frame with required columns   localities <- data.frame(locName = c(\"Sweetwater Wetlands\", \"Reid Park\"),   locID = c(\"L208918\", \"L227274\"), num_new = c(3, 5),   lat = c(32.279, 32.210), lng = c(-111.022, -110.924))   lifeR::MapSites(sites = localities) }"},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":null,"dir":"Reference","previous_headings":"","what":"Recent nearby eBird observations — RecentNearby","title":"Recent nearby eBird observations — RecentNearby","text":"Recent nearby eBird observations","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recent nearby eBird observations — RecentNearby","text":"","code":"RecentNearby(   key,   lat = 32.241,   lng = -110.938,   dist = 50,   back = 4,   hotspot = TRUE,   include_provisional = FALSE,   max_tries = 5,   timeout_sec = 30,   verbose = TRUE )"},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recent nearby eBird observations — RecentNearby","text":"key Character eBird API key. lat Numeric latitude; use negative values southern latitudes (.e. -46.86, \"46.86 S). lng Numeric longitude; use negative values western longitudes (.e. -72.08, \"72.08 W\"). dist Numeric radius kilometers distance geographic center  point given lat lng return recent  observations. back Integer number days back search observations. hotspot Logical indicating whether restrict results hotspot locations. include_provisional Logical indicating whether include observations yet reviewed. max_tries Integer maximum number query attempts try. timeout_sec Integer time allow query aborted. verbose Logical determining whether print messages queries.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recent nearby eBird observations — RecentNearby","text":"object class \"recent_obs\" following elements: query_type type query performed. query_parameters List query parameters passed request. obs data frame observations returned query;   observations returned, obs NULL","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recent nearby eBird observations — RecentNearby","text":"function uses eBird API (see https://documenter.getpostman.com/view/664302/S1ENwy59/) query recent sightings. Queries eBird API require user key; information obtaining key can found eBird API documentation.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearby.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recent nearby eBird observations — RecentNearby","text":"","code":"if (FALSE) {   # Read eBird key in from file   key <- scan(file = \"ebird-key.txt\", what = \"character\")   # Search for observations 5 km from lat/lng coordinates   recent <- RecentNearby(key = key, lat = 32.28, lng = -111.02, dist = 5) }"},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve recent nearby observations of a species — RecentNearbySpecies","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"Retrieve recent nearby observations species","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"","code":"RecentNearbySpecies(   key,   species_code,   lat = 32.241,   lng = -110.938,   dist = 50,   back = 4,   hotspot = TRUE,   include_provisional = FALSE,   max_tries = 5,   timeout_sec = 30,   verbose = TRUE )"},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"key Character eBird API key. species_code Species code species interest; usually six-character string \"purmar\" \"batpig\". See https://science.ebird.org/en/use-ebird-data/-ebird-taxonomy/  information. lat Numeric decimal degree latitude; use negative values southern  latitudes (.e. -46.86, \"46.86 S\"). lng Numeric decimal degree longitude; use negative values western longitudes (.e. -72.08, \"72.08 W\"). dist Numeric radius kilometers distance geographic center  point given lat lng return recent  observations species. back Integer number days back search observations. hotspot Logical indicating whether restrict results hotspot locations. include_provisional Logical indicating whether include observations yet reviewed. max_tries Integer maximum number query attempts try. timeout_sec Integer time allow query aborted. verbose Logical determining whether print messages queries.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"object class \"recent_obs\" following elements: query_type type query performed. query_parameters List query parameters passed request,   including species code. obs Data frame observations returned query;   observations returned, obs NULL. Columns include:","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"function uses eBird API (see https://documenter.getpostman.com/view/664302/S1ENwy59/) query recent sightings species. Queries eBird API require  user key; can request eBird API key logging eBird  account navigating https://ebird.org/api/keygen/. See examples  vignette using eBird API key.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/RecentNearbySpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve recent nearby observations of a species — RecentNearbySpecies","text":"","code":"if (FALSE) {   # Read eBird key in from file   key <- scan(file = \"ebird-key.txt\", what = \"character\")   # Search for observations of Verdin within 5 km from lat/lng coordinates   recent <- RecentNearbySpecies(key = key, species_code = \"verdin\",                                 lat = 32.28, lng = -111.02, dist = 5) }"},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Create report for sites with most unseen species — SitesReport","title":"Create report for sites with most unseen species — SitesReport","text":"Create report sites unseen species","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create report for sites with most unseen species — SitesReport","text":"","code":"SitesReport(   centers,   ebird_key,   species_seen,   center_names = NULL,   report_filename = \"Goals-Report\",   report_dir = getwd(),   report_format = c(\"html\", \"pdf\"),   max_sites = 5,   dist = 50,   back = 4,   hotspot = TRUE,   include_provisional = FALSE,   max_tries = 5,   timeout_sec = 30,   messages = c(\"minimal\", \"none\", \"verbose\"),   drop_patterns = c(\"sp.\", \"/\", \"Domestic type\", \"hybrid\") )"},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create report for sites with most unseen species — SitesReport","text":"centers Numeric vector matrix latitude longitude coordinates; vector length 2, e.g.  c(latitude, longitude), matrix two columns (first  column latitude, second column longitude). ebird_key Character vector eBird API key. species_seen Character vector species already seen. center_names Character vector names use pair  latitude longitude coordinates centers. report_filename Name output file without file extension (see  report_format); e.g. report_filename \"sites-2021\"  report_format \"html\", report saved sites-2021.html. report_dir Destination folder output file; NULL,  report saved working directory. report_format File format report; takes one two values: \"html\"  \"pdf\". max_sites Maximum number sites return pair coordinates defined centers; maximum 12. dist Numeric radius kilometers distance geographic  center point defined coordinates centers return  recent observations. back Number days back search observations. hotspot Logical indicating whether restrict results hotspot locations. include_provisional Logical indicating whether include observations yet reviewed. max_tries Maximum number query attempts try (expert use). timeout_sec Integer time allow query aborted (expert use). messages Character indicating degree messages  printed report assembly process. Options \"minimal\", \"none\",  \"verbose\". drop_patterns Character vector patterns species' names exclude certain species consideration, domesticated species, hybrids, observations identified species level (e.g. \"Toxostoma sp.\").","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create report for sites with most unseen species — SitesReport","text":"Silently returns list two named elements: results_list list element list results    queries center. element list two named elements: report_details list containing settings used build    report, days back distances.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create report for sites with most unseen species — SitesReport","text":"function uses eBird API (see https://documenter.getpostman.com/view/664302/S1ENwy59/) build report. Queries eBird API require user key; can  request eBird API key logging eBird account navigating  https://ebird.org/api/keygen/. See examples vignette using  eBird API key.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SitesReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create report for sites with most unseen species — SitesReport","text":"","code":"if (FALSE) {   # Read in data downloaded from eBird   list_file <- system.file(\"extdata\", \"example-list.csv\", package = \"lifeR\")   user_list <- read.csv(file = list_file)   # Only common names are required   my_species <- user_list$Common   # Read in eBird API key from a text file   key <- scan(file = \"ebird-key.txt\", what = \"character\")    # A single center requires vector of coordinates   locs <- c(45, -109)   SitesReport(centers = locs, ebird_key = key,    species_seen = my_species)      # For multiple centers, pass a matrix to centers argument   loc_mat <- matrix(data = c(33, -109, 39, -119.1), nrow = 2, byrow = TRUE)   loc_names <- c(\"Brushy Mountain\", \"Yerington\")   SitesReport(centers = loc_mat, ebird_key = key,    species_seen = my_species, center_names = loc_names) }"},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Split vector of names into two-column data frame — SplitNames","title":"Split vector of names into two-column data frame — SplitNames","text":"Split vector names two-column data frame","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split vector of names into two-column data frame — SplitNames","text":"","code":"SplitNames(x, delim = \" - \")"},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split vector of names into two-column data frame — SplitNames","text":"x Vector species names, format \"Common Name - Scientific name\". delim Character separator delimits common scientific names.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split vector of names into two-column data frame — SplitNames","text":"data.frame two columns, Common Scientific.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split vector of names into two-column data frame — SplitNames","text":"Names eBird returned single column :  \"Snow Goose - Anser caerulescens\". function provides means  separating common name (\"Snow Goose\") scientific name (\"Anser  caerulescens\") two separate columns.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/SplitNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split vector of names into two-column data frame — SplitNames","text":"","code":"# Read in data downloaded from eBird user_file <- system.file(\"extdata\", \"example-list.csv\", package = \"lifeR\") user_list <- read.csv(file = user_file) # Retrieve a two-column data frame with common names and scientific names species_seen <- SplitNames(x = user_list$Species) # If only common names are required, refer to \\code{Common} column species_seen <- SplitNames(x = user_list$Species)$Common"},{"path":"https://jcoliver.github.io/lifeR/reference/print.recent_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print recent_obs object — print.recent_obs","title":"Print recent_obs object — print.recent_obs","text":"Print recent_obs object","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/print.recent_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print recent_obs object — print.recent_obs","text":"","code":"# S3 method for recent_obs print(x, ...)"},{"path":"https://jcoliver.github.io/lifeR/reference/print.recent_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print recent_obs object — print.recent_obs","text":"x object class recent_obs.","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/print.recent_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print recent_obs object — print.recent_obs","text":"return value, called print summary recent_obs object","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/summary.recent_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of recent_obs object — summary.recent_obs","title":"Summary of recent_obs object — summary.recent_obs","text":"Summary recent_obs object","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/summary.recent_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of recent_obs object — summary.recent_obs","text":"","code":"# S3 method for recent_obs summary(object, ...)"},{"path":"https://jcoliver.github.io/lifeR/reference/summary.recent_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of recent_obs object — summary.recent_obs","text":"object object class \"recent_obs\".","code":""},{"path":"https://jcoliver.github.io/lifeR/reference/summary.recent_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of recent_obs object — summary.recent_obs","text":"return value, called print summary recent_obs object","code":""},{"path":"https://jcoliver.github.io/lifeR/news/index.html","id":"lifer-097","dir":"Changelog","previous_headings":"","what":"lifeR 0.9.7","title":"lifeR 0.9.7","text":"Documentation now reflects current (>= 2023) eBird data download format","code":""},{"path":"https://jcoliver.github.io/lifeR/news/index.html","id":"lifer-095","dir":"Changelog","previous_headings":"","what":"lifeR 0.9.5","title":"lifeR 0.9.5","text":"Initial version release CRAN","code":""}]
